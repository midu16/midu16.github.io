---
layout: post
title:  "LTE-all-in-one on Raspberry PI 4B+!"
date:   2022-07-20 12:32:29 +0200
categories: LTE
---
In the following post, we are going to talk about how to deploy a fully LTE network on your Raspberry PI 4B+

Prerequisites

- Raspberry PI 4B+ with minimum 4GBi RAM
- The host should have internet connectivity on eth0
- Prepare your MicroSD with Fedora 5.13.12-100.fc33.aarch64 from [Fedora Download][fedora-doc]

Lets start the installation steps:

Preparing the environment

Step 1. Install upgrade the OS

{% highlight bash %}
 sudo dnf upgrade
{% endhighlight %}

Step 2. Install the UHD Drivers for the USRP

For more informations on how to install UHD Drivers on different types of OS check the [UHD Documentation][uhd-doc].

{% highlight bash %}
 sudo yum install uhd uhd-devel
{% endhighlight %}

If the above command is not installing the packages its required to define the ettus.repo

{% highlight bash %}
 sudo vi /etc/yum.repos.d/ettus.repo
{% endhighlight %}

Paste the following content in the files and save the file:
{% highlight bash %}
 [ettus-uhd-stable-repo]
  name=Ettus Research - UHD Stable $releasever-$basearchthon serial timeout
  baseurl=http://files.ettus.com/binaries/uhd/repo/uhd/fedora/$releasever/$basearch
  gpgcheck=0
{% endhighlight %}

Now to install the required binaries run the following command:
{% highlight bash %}
 sudo yum --enablerepo='ettus-uhd-stable-repo' install uhd
{% endhighlight %}

Step 3. Verify that the UHD driver is working as expected

Connect the USRP device to the Raspberry PI. Use the usb-3.0 cable or the ethernet cable and run the following command.

{% highlight bash %}
sudo uhd_find_devices
{% endhighlight %}

Make sure that you have the same or a similar output from the command.

{% highlight bash %}
[INFO] [UHD] linux; GNU C++ version 10.2.1 20200804 (Red Hat 10.2.1-2); Boost_107300; UHD_3.15.0.0
--------------------------------------------------
-- UHD Device 0
--------------------------------------------------
Device Address:
   serial: 315A8CF
   name: B200mini
   product: B200mini
   type: b200
{% endhighlight %}


Step 4. Download the LTE binary components

We are going to place all the binaries required for srs under the /usr/local/bin/

{% highlight bash %}
 wget https://github.com/midu16/midu16.github.io/blob/main/assets/binaries/srs/aarch64/srsenb
 wget https://github.com/midu16/midu16.github.io/blob/main/assets/binaries/srs/aarch64/srsepc
 wget https://github.com/midu16/midu16.github.io/blob/main/assets/binaries/srs/aarch64/srslte_install_configs.sh
{% endhighlight %}

Move the files from the current directory under the /usr/local/bin/

{% highlight bash %}
 sudo mv srsenb /usr/local/bin/srsenb ; sudo chmod a+x /usr/local/bin/srsenb
 sudo mv srsepc /usr/local/bin/srsepc ; sudo chmod a+x /usr/local/bin/srsepc
 sudo mv srslte_install_configs.sh /usr/local/bin/srslte_install_configs.sh ; sudo chmod a+x /usr/local/bin/srslte_install_configs.sh
{% endhighlight %}

Step 5. Download the srs conf files

{% highlight bash %}
 mkdir -p /etc/srslte/
 curl -o /etc/srslte/enb.conf https://github.com/midu16/midu16.github.io/blob/main/assets/binaries/srs/configs/enb.conf
 curl -o /etc/srslte/epc.conf https://github.com/midu16/midu16.github.io/blob/main/assets/binaries/srs/configs/epc.conf
 curl -o /etc/srslte/mbms.conf https://github.com/midu16/midu16.github.io/blob/main/assets/binaries/srs/configs/mbms.conf
 curl -o /etc/srslte/rr.conf https://github.com/midu16/midu16.github.io/blob/main/assets/binaries/srs/configs/rr.conf
 curl -o /etc/srslte/sib.conf https://github.com/midu16/midu16.github.io/blob/main/assets/binaries/srs/configs/sib.conf
 curl -o /etc/srslte/user_db.csv https://github.com/midu16/midu16.github.io/blob/main/assets/binaries/srs/configs/user_db.csv
 curl -o /etc/srslte/drb.conf https://github.com/midu16/midu16.github.io/blob/main/assets/binaries/srs/configs/drb.conf
 sudo chmod 775 /etc/srslte/*
{% endhighlight %}

Step 6. Running the application

Open two terminal connections to your Raspberry PI 4B+

Terminal number 1:

{% highlight bash %}
 sudo srsepc
{% endhighlight %}

The command will generate the following output:

{% highlight bash %}
Built in Release mode using 20.10.1.


---  Software Radio Systems EPC  ---

Reading configuration file /etc/srslte/epc.conf...
HSS Initialized.
Failed to open file "/tmp/epc.pcap" for writing
MME S11 Initialized
MME GTP-C Initialized
MME Initialized. MCC: 0xf901, MNC: 0xff70
SPGW GTP-U Initialized.
SPGW S11 Initialized.
SP-GW Initialized.
Received S1 Setup Request.
S1 Setup Request - eNB Name: srsenb01, eNB id: 0x19b
S1 Setup Request - MCC:901, MNC:70
S1 Setup Request - TAC 7, B-PLMN 0x9f107
S1 Setup Request - Paging DRX v128
Sending S1 Setup Response
{% endhighlight %}

Terminal number 2:

{% highlight bash %}
 srsenb
{% endhighlight %}


The command will generate the following output:

{% highlight bash %}
---  Software Radio Systems LTE eNodeB  ---
Reading configuration file /etc/srslte/enb.conf...
Built in Release mode using 20.10.1.
/home/midu/Desktop/srsLTE-release_20_10_1/srsenb/src/enb_cfg_parser.cc.890: Force DL EARFCN for cell PCI=1 to 1934
Opening 1 channels in RF device=UHD with args=default
[INFO] [UHD] linux; GNU C++ version 10.2.1 20200804 (Red Hat 10.2.1-2); Boost_107300; UHD_3.15.0.0
[INFO] [LOGGING] Fastpath logging disabled at runtime.
Opening USRP channels=1, args: type=b200,master_clock_rate=23.04e6
[INFO] [B200] Detected Device: B200mini
[INFO] [B200] Operating over USB 3.
[INFO] [B200] Initialize CODEC control...
[INFO] [B200] Initialize Radio control...
[INFO] [B200] Performing register loopback test...
[INFO] [B200] Register loopback test passed
[INFO] [B200] Asking for clock rate 23.040000 MHz...
[INFO] [B200] Actually got clock rate 23.040000 MHz.
Setting frequency: DL=1878.4 Mhz, UL=1783.4 MHz for cc_idx=0


==== eNodeB started ===
Type <t> to view trace
{% endhighlight %}


[fedora-doc]: https://docs.fedoraproject.org/en-US/quick-docs/raspberry-pi/
[srs-doc]:   https://docs.srsran.com/en/latest/app_notes/source/pi4/source/index.html
[uhd-doc]: https://files.ettus.com/manual/page_install.html
[srsenb]: https://github.com/midu16/midu16.github.io/blob/main/assets/binaries/srs/aarch64/srsenb
[srsepc]: https://github.com/midu16/midu16.github.io/blob/main/assets/binaries/srs/aarch64/srsepc
[srsepc_if_masq.sh]: https://github.com/midu16/midu16.github.io/blob/main/assets/binaries/srs/aarch64/srsepc_if_masq.sh
[srslte_install_configs.sh]:https://github.com/midu16/midu16.github.io/blob/main/assets/binaries/srs/aarch64/srslte_install_configs.sh
